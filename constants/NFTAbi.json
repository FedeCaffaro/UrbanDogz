{
  "address": "0xAD544B791111049CF5A182FA053205076B4dE461",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFee",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "flipProxyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmountPerTx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmountPerTxPreSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPerWalletPreSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proxyToApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "reserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMintAmountPerTx",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintAmountPerTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMintAmountPerTxPreSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintAmountPerTxPreSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPerWalletPreSale",
          "type": "uint256"
        }
      ],
      "name": "setMaxPerWalletPreSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setOnlyWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_preSalePrice",
          "type": "uint256"
        }
      ],
      "name": "setPreSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeBasisPoints",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x110839e81fcd16119b981eb73cbbf5be082581573b1925b2651a2bdbce82c0c4",
  "receipt": {
    "to": null,
    "from": "0x399Db9b924bC348BfC3bD777817631eb5A79b152",
    "contractAddress": "0xAD544B791111049CF5A182FA053205076B4dE461",
    "transactionIndex": 23,
    "gasUsed": "2646891",
    "logsBloom": "0x
    "blockHash": "0x7d5c383529c6e7ad6461474468b66273c7bbac38ddadf9a5bad68bd63a03889d",
    "transactionHash": "0x110839e81fcd16119b981eb73cbbf5be082581573b1925b2651a2bdbce82c0c4",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10555670,
        "transactionHash": "0x110839e81fcd16119b981eb73cbbf5be082581573b1925b2651a2bdbce82c0c4",
        "address": "0xAD544B791111049CF5A182FA053205076B4dE461",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x7d5c383529c6e7ad6461474468b66273c7bbac38ddadf9a5bad68bd63a03889d"
      }
    ],
    "blockNumber": 10555670,
    "cumulativeGasUsed": "3594354",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "UrbanDogzClub",
    "UDC",
    "0x1E525EEAF261cA41b809884CBDE9DD9E1619573A",
    "0x399Db9b924bC348BfC3bD777817631eb5A79b152",
    500
  ],
  "numDeployments": 1,
  "solcInputHash": "c67b0ea760f6e2f0ae6c72aa472e4cdc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTxPreSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWalletPreSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyToApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerTxPreSale\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTxPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerWalletPreSale\",\"type\":\"uint256\"}],\"name\":\"setMaxPerWalletPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setOnlyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preSalePrice\",\"type\":\"uint256\"}],\"name\":\"setPreSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist contracts.\"},\"setRoyaltyInfo(address,uint96)\":{\"notice\":\"Sets the contract-wide royalty info.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UrbanDogz.sol\":\"UrbanDogz\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x73a07d6155bb2549828bf1ce4dce2300b5d78c958acb922e61a3341ea4279c97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/UrbanDogz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract OpenSeaProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\ncontract UrbanDogz is Ownable, ERC721A, ReentrancyGuard,ERC2981 {\\n\\n  using Strings for uint256;\\n\\n  // Variables\\n\\n    // Sale config\\n    uint256 public maxSupply = 500;\\n    uint256 public price = 120000000000000000;\\n    uint256 public preSalePrice = 80000000000000000;\\n    uint256 public maxMintAmountPerTxPreSale = 1;\\n    uint256 public maxPerWalletPreSale = 1;\\n    uint256 public maxMintAmountPerTx = 10;\\n    bool public paused = true;\\n    bool public onlyWhitelist = true;\\n\\n    // Metadata\\n    string private _baseTokenURI;\\n\\n    // Whitelist\\n    bytes32 private merkleRoot;\\n \\n    // Proxies\\n    address public proxyRegistryAddress;\\n\\n    //The OpenSea Proxy Registry addresses are:\\n    //Rinkeby: 0x1E525EEAF261cA41b809884CBDE9DD9E1619573A\\n    //Mainnet: 0xa5409ec958c83c3f309868babaca7c86dcb077c1\\n\\n  //Constructor\\n  constructor(string memory _name, string memory \\n  _symbol,address _proxyRegistryAddress,address royaltyReceiver,\\n  uint96 royaltyFee) \\n  ERC721A(_name, _symbol)\\n    {\\n      proxyRegistryAddress = _proxyRegistryAddress;\\n      _setDefaultRoyalty(royaltyReceiver, royaltyFee);\\n\\n    }\\n\\n  // Metadata\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return _baseTokenURI;\\n  }\\n\\n  function setBaseURI(string calldata baseURI) external onlyOwner {\\n    _baseTokenURI = baseURI;\\n  }\\n\\n  // Whitelist\\n  function setMerkleRoot(bytes32 _root) public onlyOwner {\\n      merkleRoot = _root;\\n    }\\n\\n\\n  //Sale config\\n  function pause(bool _state) public onlyOwner {\\n      paused = _state;\\n    }\\n\\n  function setOnlyWhitelist(bool _state) public onlyOwner {\\n        onlyWhitelist = _state;\\n    }\\n\\n  function setMaxSupply(uint256 _maxSupply) public onlyOwner {\\n    maxSupply = _maxSupply;\\n  }\\n\\n  function setMaxPerWalletPreSale(uint256 _maxPerWalletPreSale) public onlyOwner {\\n    maxPerWalletPreSale = _maxPerWalletPreSale;\\n  }\\n\\n  function setMaxMintAmountPerTxPreSale(uint256 _maxMintAmountPerTxPreSale) public onlyOwner {\\n    maxMintAmountPerTxPreSale = _maxMintAmountPerTxPreSale;\\n  }\\n\\n  function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {\\n    maxMintAmountPerTx = _maxMintAmountPerTx;\\n  }\\n\\n  function setPrice(uint256 _price) public onlyOwner {\\n    price = _price;\\n  }\\n\\n  function setPreSalePrice(uint256 _preSalePrice) public onlyOwner {\\n    preSalePrice = _preSalePrice;\\n  }\\n\\n\\n  function verify(\\n    bytes32[] calldata merkleProof,\\n    address sender\\n  ) public view returns (bool) {\\n    bytes32 leaf = keccak256(abi.encodePacked(sender));\\n    return MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n  }\\n\\n  function whitelistMint(uint256 quantity, bytes32[] calldata _merkleProof) external payable{\\n    uint256 currentSupply = totalSupply();\\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n    require(!paused, 'Minting paused');\\n    require(onlyWhitelist, \\\"Whitelist minting is not active or has already ended\\\");\\n    require(msg.value > 0, \\\"Must send ETH to mint.\\\");\\n    require(currentSupply <= maxSupply, \\\"Sold out.\\\");\\n    require(currentSupply + quantity <= maxSupply, \\\"Requested quantity would exceed total supply.\\\");\\n    require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), \\\"User is not in the whitelist\\\");\\n    require(balanceOf(msg.sender) < maxPerWalletPreSale,\\\"Exceeds wallet limit for presale\\\");\\n    require(quantity <= maxMintAmountPerTxPreSale, \\\"Exceeds presale txn limit\\\");\\n    require(preSalePrice * quantity <= msg.value, \\\"ETH sent is incorrect.\\\");\\n      _safeMint(msg.sender, quantity);\\n  }\\n\\n\\n  function publicMint(uint256 quantity) external payable{\\n    uint256 currentSupply = totalSupply();\\n    require(!paused, 'Minting paused');\\n    require(msg.value > 0, \\\"Must send ETH to mint.\\\");\\n    require(currentSupply <= maxSupply, \\\"Sold out.\\\");\\n    require(quantity <= maxMintAmountPerTx, \\\"Exceeds txn limit\\\");\\n    require(price * quantity <= msg.value, \\\"ETH sent is incorrect.\\\");\\n      _safeMint(msg.sender, quantity);\\n  }\\n\\n  // For dev use only\\n  function reserve(address _address, uint256 _quantity) public onlyOwner {\\n      _safeMint(_address, _quantity);\\n    }\\n\\n\\n  // Withdraw\\n  function withdraw() external onlyOwner nonReentrant {\\n    (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    require(success, \\\"Transfer failed.\\\"); \\n  }\\n\\n  /**\\n   * Override isApprovedForAll to whitelist contracts.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n      public\\n      view\\n      override\\n      returns (bool)\\n    {\\n      // Whitelist OpenSea proxy contract for easy trading.\\n      OpenSeaProxyRegistry proxyRegistry = OpenSeaProxyRegistry(proxyRegistryAddress);\\n      if (address(proxyRegistry.proxies(owner)) == operator || proxyToApproved[operator]) return true;\\n      return super.isApprovedForAll(owner, operator);\\n    }\\n\\n  function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwner {\\n      proxyRegistryAddress = _proxyRegistryAddress;\\n    }\\n\\n  // Whitelist another contracts to enable gas-less approving.\\n  mapping(address=>bool) public proxyToApproved;\\n\\n  function flipProxyState(address proxyAddress) public onlyOwner {\\n    proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\n  }\\n\\n  // Royalties\\n  function setDefaultRoyalty(address receiver, uint96 feeNumerator)\\n        external\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n  @notice Sets the contract-wide royalty info.\\n  */\\n\\n  function setRoyaltyInfo(address receiver, uint96 feeBasisPoints) external onlyOwner\\n    {\\n      _setDefaultRoyalty(receiver, feeBasisPoints);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721A, ERC2981) returns (bool)\\n    {\\n      return super.supportsInterface(interfaceId);\\n    }\\n\\n}\",\"keccak256\":\"0xe36b6d38bcf7daae93b7698d024a3d1835b8310975f7d421b99fa74e2f86d97a\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror AuxQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5a3f70f309452b24ff4268be3c57c88f2c9aa7b8711b4951f0521fd0488b7b51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526101f4600c556701aa535d3d0c0000600d5567011c37937e080000600e556001600f819055601055600a6011556012805461ffff19166101011790553480156200004d57600080fd5b5060405162002e0a38038062002e0a8339810160408190526200007091620003cc565b84846200007d33620000e7565b8151620000929060039060208501906200023c565b508051620000a89060049060208401906200023c565b50600060019081556009555050601580546001600160a01b0319166001600160a01b038516179055620000dc828262000137565b5050505050620004bb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6127106001600160601b0382161115620001ab5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084015b60405180910390fd5b6001600160a01b038216620002035760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401620001a2565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b8280546200024a906200047e565b90600052602060002090601f0160209004810192826200026e5760008555620002b9565b82601f106200028957805160ff1916838001178555620002b9565b82800160010185558215620002b9579182015b82811115620002b95782518255916020019190600101906200029c565b50620002c7929150620002cb565b5090565b5b80821115620002c75760008155600101620002cc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200030a57600080fd5b81516001600160401b0380821115620003275762000327620002e2565b604051601f8301601f19908116603f01168101908282118183101715620003525762000352620002e2565b816040528381526020925086838588010111156200036f57600080fd5b600091505b8382101562000393578582018301518183018401529082019062000374565b83821115620003a55760008385830101525b9695505050505050565b80516001600160a01b0381168114620003c757600080fd5b919050565b600080600080600060a08688031215620003e557600080fd5b85516001600160401b0380821115620003fd57600080fd5b6200040b89838a01620002f8565b965060208801519150808211156200042257600080fd5b506200043188828901620002f8565b9450506200044260408701620003af565b92506200045260608701620003af565b60808701519092506001600160601b03811681146200047057600080fd5b809150509295509295909350565b600181811c908216806200049357607f821691505b60208210811415620004b557634e487b7160e01b600052602260045260246000fd5b50919050565b61293f80620004cb6000396000f3fe6080604052600436106102885760003560e01c80637cb647591161015a578063b476aae3116100c1578063d2cab0561161007a578063d2cab05614610791578063d5abeb01146107a4578063e757c17d146107ba578063e985e9c5146107d0578063f2fde38b146107f0578063f73c814b1461081057600080fd5b8063b476aae3146106d1578063b88d4fde146106f1578063c87b56dd14610711578063cc47a40b14610731578063cd7c032614610751578063d26ea6c01461077157600080fd5b806395d89b411161011357806395d89b41146106175780639dc38c7d1461062c578063a035b1fe1461065c578063a22cb46514610672578063a88e099614610692578063b071401b146106b157600080fd5b80637cb647591461056d5780637d7eee421461058d57806380558a6b146105ad5780638da5cb5b146105c357806391b7f5ed146105e157806394354fd01461060157600080fd5b80632a55205a116101fe5780635c975abb116101b75780635c975abb146104be5780636352211e146104d8578063659a1026146104f85780636f8b44b01461051857806370a0823114610538578063715018a61461055857600080fd5b80632a55205a146104015780632db115441461044057806339c7d59d146104535780633ccfd60b1461046957806342842e0e1461047e57806355f804b31461049e57600080fd5b8063081812fc11610250578063081812fc14610326578063095ea7b31461035e5780630efc17b61461037e57806318160ddd1461039e5780631dd02b4b146103c157806323b872dd146103e157600080fd5b806301ffc9a71461028d57806302329a29146102c257806302fa7c47146102e457806304634d8d146102e457806306fdde0314610304575b600080fd5b34801561029957600080fd5b506102ad6102a8366004612296565b610830565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102e26102dd3660046122c8565b610841565b005b3480156102f057600080fd5b506102e26102ff3660046122f8565b610887565b34801561031057600080fd5b506103196108bf565b6040516102b99190612395565b34801561033257600080fd5b506103466103413660046123a8565b610951565b6040516001600160a01b0390911681526020016102b9565b34801561036a57600080fd5b506102e26103793660046123c1565b610995565b34801561038a57600080fd5b506102e26103993660046123a8565b610a23565b3480156103aa57600080fd5b50600254600154035b6040519081526020016102b9565b3480156103cd57600080fd5b506102e26103dc3660046122c8565b610a52565b3480156103ed57600080fd5b506102e26103fc3660046123ed565b610a96565b34801561040d57600080fd5b5061042161041c36600461242e565b610aa1565b604080516001600160a01b0390931683526020830191909152016102b9565b6102e261044e3660046123a8565b610b4f565b34801561045f57600080fd5b506103b3600f5481565b34801561047557600080fd5b506102e2610cd2565b34801561048a57600080fd5b506102e26104993660046123ed565b610de7565b3480156104aa57600080fd5b506102e26104b9366004612450565b610e02565b3480156104ca57600080fd5b506012546102ad9060ff1681565b3480156104e457600080fd5b506103466104f33660046123a8565b610e38565b34801561050457600080fd5b506102ad610513366004612507565b610e4a565b34801561052457600080fd5b506102e26105333660046123a8565b610ed0565b34801561054457600080fd5b506103b361055336600461255e565b610eff565b34801561056457600080fd5b506102e2610f4e565b34801561057957600080fd5b506102e26105883660046123a8565b610f84565b34801561059957600080fd5b506102e26105a83660046123a8565b610fb3565b3480156105b957600080fd5b506103b360105481565b3480156105cf57600080fd5b506000546001600160a01b0316610346565b3480156105ed57600080fd5b506102e26105fc3660046123a8565b610fe2565b34801561060d57600080fd5b506103b360115481565b34801561062357600080fd5b50610319611011565b34801561063857600080fd5b506102ad61064736600461255e565b60166020526000908152604090205460ff1681565b34801561066857600080fd5b506103b3600d5481565b34801561067e57600080fd5b506102e261068d36600461257b565b611020565b34801561069e57600080fd5b506012546102ad90610100900460ff1681565b3480156106bd57600080fd5b506102e26106cc3660046123a8565b6110b6565b3480156106dd57600080fd5b506102e26106ec3660046123a8565b6110e5565b3480156106fd57600080fd5b506102e261070c3660046125c6565b611114565b34801561071d57600080fd5b5061031961072c3660046123a8565b611165565b34801561073d57600080fd5b506102e261074c3660046123c1565b6111ea565b34801561075d57600080fd5b50601554610346906001600160a01b031681565b34801561077d57600080fd5b506102e261078c36600461255e565b61121e565b6102e261079f3660046126a6565b61126a565b3480156107b057600080fd5b506103b3600c5481565b3480156107c657600080fd5b506103b3600e5481565b3480156107dc57600080fd5b506102ad6107eb3660046126f2565b611607565b3480156107fc57600080fd5b506102e261080b36600461255e565b6116fa565b34801561081c57600080fd5b506102e261082b36600461255e565b611795565b600061083b826117e8565b92915050565b6000546001600160a01b031633146108745760405162461bcd60e51b815260040161086b90612720565b60405180910390fd5b6012805460ff1916911515919091179055565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260040161086b90612720565b6108bb828261180d565b5050565b6060600380546108ce90612755565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa90612755565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050905090565b600061095c8261190a565b610979576040516333d1c03960e21b815260040160405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006109a082610e38565b9050806001600160a01b0316836001600160a01b031614156109d55760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109f557506109f38133611607565b155b15610a13576040516367d9dca160e11b815260040160405180910390fd5b610a1e838383611936565b505050565b6000546001600160a01b03163314610a4d5760405162461bcd60e51b815260040161086b90612720565b600f55565b6000546001600160a01b03163314610a7c5760405162461bcd60e51b815260040161086b90612720565b601280549115156101000261ff0019909216919091179055565b610a1e838383611992565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610b16575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b35906001600160601b0316876127a6565b610b3f91906127db565b91519350909150505b9250929050565b6000610b5e6002546001540390565b60125490915060ff1615610ba55760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d1a5b99c81c185d5cd95960921b604482015260640161086b565b60003411610bee5760405162461bcd60e51b815260206004820152601660248201527526bab9ba1039b2b7321022aa24103a379036b4b73a1760511b604482015260640161086b565b600c54811115610c2c5760405162461bcd60e51b815260206004820152600960248201526829b7b6321037baba1760b91b604482015260640161086b565b601154821115610c725760405162461bcd60e51b8152602060048201526011602482015270115e18d959591cc81d1e1b881b1a5b5a5d607a1b604482015260640161086b565b3482600d54610c8191906127a6565b1115610cc85760405162461bcd60e51b815260206004820152601660248201527522aa241039b2b73a1034b99034b731b7b93932b1ba1760511b604482015260640161086b565b6108bb3383611ba5565b6000546001600160a01b03163314610cfc5760405162461bcd60e51b815260040161086b90612720565b60026009541415610d4f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161086b565b6002600955604051600090339047908381818185875af1925050503d8060008114610d96576040519150601f19603f3d011682016040523d82523d6000602084013e610d9b565b606091505b5050905080610ddf5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b506001600955565b610a1e83838360405180602001604052806000815250611114565b6000546001600160a01b03163314610e2c5760405162461bcd60e51b815260040161086b90612720565b610a1e601383836121e7565b6000610e4382611bbf565b5192915050565b6040516bffffffffffffffffffffffff19606083901b1660208201526000908190603401604051602081830303815290604052805190602001209050610ec7858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014549150849050611cdb565b95945050505050565b6000546001600160a01b03163314610efa5760405162461bcd60e51b815260040161086b90612720565b600c55565b60006001600160a01b038216610f28576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526006602052604090205467ffffffffffffffff1690565b6000546001600160a01b03163314610f785760405162461bcd60e51b815260040161086b90612720565b610f826000611cf1565b565b6000546001600160a01b03163314610fae5760405162461bcd60e51b815260040161086b90612720565b601455565b6000546001600160a01b03163314610fdd5760405162461bcd60e51b815260040161086b90612720565b600e55565b6000546001600160a01b0316331461100c5760405162461bcd60e51b815260040161086b90612720565b600d55565b6060600480546108ce90612755565b6001600160a01b03821633141561104a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546001600160a01b031633146110e05760405162461bcd60e51b815260040161086b90612720565b601155565b6000546001600160a01b0316331461110f5760405162461bcd60e51b815260040161086b90612720565b601055565b61111f848484611992565b6001600160a01b0383163b15158015611141575061113f84848484611d41565b155b1561115f576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606111708261190a565b61118d57604051630a14c4b560e41b815260040160405180910390fd5b6000611197611e38565b90508051600014156111b857604051806020016040528060008152506111e3565b806111c284611e47565b6040516020016111d39291906127ef565b6040516020818303038152906040525b9392505050565b6000546001600160a01b031633146112145760405162461bcd60e51b815260040161086b90612720565b6108bb8282611ba5565b6000546001600160a01b031633146112485760405162461bcd60e51b815260040161086b90612720565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b60006112796002546001540390565b6040516bffffffffffffffffffffffff193360601b16602082015290915060009060340160408051601f19818403018152919052805160209091012060125490915060ff16156112fc5760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d1a5b99c81c185d5cd95960921b604482015260640161086b565b601254610100900460ff166113705760405162461bcd60e51b815260206004820152603460248201527f57686974656c697374206d696e74696e67206973206e6f7420616374697665206044820152731bdc881a185cc8185b1c9958591e48195b99195960621b606482015260840161086b565b600034116113b95760405162461bcd60e51b815260206004820152601660248201527526bab9ba1039b2b7321022aa24103a379036b4b73a1760511b604482015260640161086b565b600c548211156113f75760405162461bcd60e51b815260206004820152600960248201526829b7b6321037baba1760b91b604482015260640161086b565b600c54611404868461281e565b11156114685760405162461bcd60e51b815260206004820152602d60248201527f526571756573746564207175616e7469747920776f756c64206578636565642060448201526c3a37ba30b61039bab838363c9760991b606482015260840161086b565b6114a9848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014549150849050611cdb565b6114f55760405162461bcd60e51b815260206004820152601c60248201527f55736572206973206e6f7420696e207468652077686974656c69737400000000604482015260640161086b565b60105461150133610eff565b1061154e5760405162461bcd60e51b815260206004820181905260248201527f457863656564732077616c6c6574206c696d697420666f722070726573616c65604482015260640161086b565b600f548511156115a05760405162461bcd60e51b815260206004820152601960248201527f457863656564732070726573616c652074786e206c696d697400000000000000604482015260640161086b565b3485600e546115af91906127a6565b11156115f65760405162461bcd60e51b815260206004820152601660248201527522aa241039b2b73a1034b99034b731b7b93932b1ba1760511b604482015260640161086b565b6116003386611ba5565b5050505050565b60155460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561165457600080fd5b505afa158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c9190612836565b6001600160a01b031614806116b957506001600160a01b03831660009081526016602052604090205460ff165b156116c857600191505061083b565b6001600160a01b0380851660009081526008602090815260408083209387168352929052205460ff165b949350505050565b6000546001600160a01b031633146117245760405162461bcd60e51b815260040161086b90612720565b6001600160a01b0381166117895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086b565b61179281611cf1565b50565b6000546001600160a01b031633146117bf5760405162461bcd60e51b815260040161086b90612720565b6001600160a01b03166000908152601660205260409020805460ff19811660ff90911615179055565b60006001600160e01b0319821663152a902d60e11b148061083b575061083b82611f45565b6127106001600160601b038216111561187b5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161086b565b6001600160a01b0382166118d15760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161086b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b60006001548210801561083b575050600090815260056020526040902054600160e01b900460ff161590565b60008281526007602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061199d82611bbf565b80519091506000906001600160a01b0316336001600160a01b031614806119cb575081516119cb9033611607565b806119e65750336119db84610951565b6001600160a01b0316145b905080611a0657604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611a3b5760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416611a6257604051633a954ecd60e21b815260040160405180910390fd5b611a726000848460000151611936565b6001600160a01b038581166000908152600660209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600590945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611b5e57600154811015611b5e578251600082815260056020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611600565b6108bb828260405180602001604052806000815250611f95565b604080516060810182526000808252602082018190529181019190915281600154811015611cc257600081815260056020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611cc05780516001600160a01b031615611c56579392505050565b5060001901600081815260056020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611cbb579392505050565b611c56565b505b604051636f96cda160e11b815260040160405180910390fd5b600082611ce88584611fa2565b14949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611d76903390899088908890600401612853565b602060405180830381600087803b158015611d9057600080fd5b505af1925050508015611dc0575060408051601f3d908101601f19168201909252611dbd91810190612890565b60015b611e1b573d808015611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b508051611e13576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060601380546108ce90612755565b606081611e6b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e955780611e7f816128ad565b9150611e8e9050600a836127db565b9150611e6f565b60008167ffffffffffffffff811115611eb057611eb06125b0565b6040519080825280601f01601f191660200182016040528015611eda576020820181803683370190505b5090505b84156116f257611eef6001836128c8565b9150611efc600a866128df565b611f0790603061281e565b60f81b818381518110611f1c57611f1c6128f3565b60200101906001600160f81b031916908160001a905350611f3e600a866127db565b9450611ede565b60006001600160e01b031982166380ac58cd60e01b1480611f7657506001600160e01b03198216635b5e139f60e01b145b8061083b57506301ffc9a760e01b6001600160e01b031983161461083b565b610a1e8383836001612016565b600081815b845181101561200e576000858281518110611fc457611fc46128f3565b60200260200101519050808311611fea5760008381526020829052604090209250611ffb565b600081815260208490526040902092505b5080612006816128ad565b915050611fa7565b509392505050565b6001546001600160a01b03851661203f57604051622e076360e81b815260040160405180910390fd5b8361205d5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260066020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600590925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561210f57506001600160a01b0387163b15155b15612198575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46121606000888480600101955088611d41565b61217d576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561211557826001541461219357600080fd5b6121de565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415612199575b50600155611600565b8280546121f390612755565b90600052602060002090601f016020900481019282612215576000855561225b565b82601f1061222e5782800160ff1982351617855561225b565b8280016001018555821561225b579182015b8281111561225b578235825591602001919060010190612240565b5061226792915061226b565b5090565b5b80821115612267576000815560010161226c565b6001600160e01b03198116811461179257600080fd5b6000602082840312156122a857600080fd5b81356111e381612280565b803580151581146122c357600080fd5b919050565b6000602082840312156122da57600080fd5b6111e3826122b3565b6001600160a01b038116811461179257600080fd5b6000806040838503121561230b57600080fd5b8235612316816122e3565b915060208301356001600160601b038116811461233257600080fd5b809150509250929050565b60005b83811015612358578181015183820152602001612340565b8381111561115f5750506000910152565b6000815180845261238181602086016020860161233d565b601f01601f19169290920160200192915050565b6020815260006111e36020830184612369565b6000602082840312156123ba57600080fd5b5035919050565b600080604083850312156123d457600080fd5b82356123df816122e3565b946020939093013593505050565b60008060006060848603121561240257600080fd5b833561240d816122e3565b9250602084013561241d816122e3565b929592945050506040919091013590565b6000806040838503121561244157600080fd5b50508035926020909101359150565b6000806020838503121561246357600080fd5b823567ffffffffffffffff8082111561247b57600080fd5b818501915085601f83011261248f57600080fd5b81358181111561249e57600080fd5b8660208285010111156124b057600080fd5b60209290920196919550909350505050565b60008083601f8401126124d457600080fd5b50813567ffffffffffffffff8111156124ec57600080fd5b6020830191508360208260051b8501011115610b4857600080fd5b60008060006040848603121561251c57600080fd5b833567ffffffffffffffff81111561253357600080fd5b61253f868287016124c2565b9094509250506020840135612553816122e3565b809150509250925092565b60006020828403121561257057600080fd5b81356111e3816122e3565b6000806040838503121561258e57600080fd5b8235612599816122e3565b91506125a7602084016122b3565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156125dc57600080fd5b84356125e7816122e3565b935060208501356125f7816122e3565b925060408501359150606085013567ffffffffffffffff8082111561261b57600080fd5b818701915087601f83011261262f57600080fd5b813581811115612641576126416125b0565b604051601f8201601f19908116603f01168101908382118183101715612669576126696125b0565b816040528281528a602084870101111561268257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806000604084860312156126bb57600080fd5b83359250602084013567ffffffffffffffff8111156126d957600080fd5b6126e5868287016124c2565b9497909650939450505050565b6000806040838503121561270557600080fd5b8235612710816122e3565b91506020830135612332816122e3565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061276957607f821691505b6020821081141561278a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156127c0576127c0612790565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826127ea576127ea6127c5565b500490565b6000835161280181846020880161233d565b83519083019061281581836020880161233d565b01949350505050565b6000821982111561283157612831612790565b500190565b60006020828403121561284857600080fd5b81516111e3816122e3565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061288690830184612369565b9695505050505050565b6000602082840312156128a257600080fd5b81516111e381612280565b60006000198214156128c1576128c1612790565b5060010190565b6000828210156128da576128da612790565b500390565b6000826128ee576128ee6127c5565b500690565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fc357f7406aeb6462dbdfb77ff16969631de5d469d6f48ff27c523692d55085664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80637cb647591161015a578063b476aae3116100c1578063d2cab0561161007a578063d2cab05614610791578063d5abeb01146107a4578063e757c17d146107ba578063e985e9c5146107d0578063f2fde38b146107f0578063f73c814b1461081057600080fd5b8063b476aae3146106d1578063b88d4fde146106f1578063c87b56dd14610711578063cc47a40b14610731578063cd7c032614610751578063d26ea6c01461077157600080fd5b806395d89b411161011357806395d89b41146106175780639dc38c7d1461062c578063a035b1fe1461065c578063a22cb46514610672578063a88e099614610692578063b071401b146106b157600080fd5b80637cb647591461056d5780637d7eee421461058d57806380558a6b146105ad5780638da5cb5b146105c357806391b7f5ed146105e157806394354fd01461060157600080fd5b80632a55205a116101fe5780635c975abb116101b75780635c975abb146104be5780636352211e146104d8578063659a1026146104f85780636f8b44b01461051857806370a0823114610538578063715018a61461055857600080fd5b80632a55205a146104015780632db115441461044057806339c7d59d146104535780633ccfd60b1461046957806342842e0e1461047e57806355f804b31461049e57600080fd5b8063081812fc11610250578063081812fc14610326578063095ea7b31461035e5780630efc17b61461037e57806318160ddd1461039e5780631dd02b4b146103c157806323b872dd146103e157600080fd5b806301ffc9a71461028d57806302329a29146102c257806302fa7c47146102e457806304634d8d146102e457806306fdde0314610304575b600080fd5b34801561029957600080fd5b506102ad6102a8366004612296565b610830565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102e26102dd3660046122c8565b610841565b005b3480156102f057600080fd5b506102e26102ff3660046122f8565b610887565b34801561031057600080fd5b506103196108bf565b6040516102b99190612395565b34801561033257600080fd5b506103466103413660046123a8565b610951565b6040516001600160a01b0390911681526020016102b9565b34801561036a57600080fd5b506102e26103793660046123c1565b610995565b34801561038a57600080fd5b506102e26103993660046123a8565b610a23565b3480156103aa57600080fd5b50600254600154035b6040519081526020016102b9565b3480156103cd57600080fd5b506102e26103dc3660046122c8565b610a52565b3480156103ed57600080fd5b506102e26103fc3660046123ed565b610a96565b34801561040d57600080fd5b5061042161041c36600461242e565b610aa1565b604080516001600160a01b0390931683526020830191909152016102b9565b6102e261044e3660046123a8565b610b4f565b34801561045f57600080fd5b506103b3600f5481565b34801561047557600080fd5b506102e2610cd2565b34801561048a57600080fd5b506102e26104993660046123ed565b610de7565b3480156104aa57600080fd5b506102e26104b9366004612450565b610e02565b3480156104ca57600080fd5b506012546102ad9060ff1681565b3480156104e457600080fd5b506103466104f33660046123a8565b610e38565b34801561050457600080fd5b506102ad610513366004612507565b610e4a565b34801561052457600080fd5b506102e26105333660046123a8565b610ed0565b34801561054457600080fd5b506103b361055336600461255e565b610eff565b34801561056457600080fd5b506102e2610f4e565b34801561057957600080fd5b506102e26105883660046123a8565b610f84565b34801561059957600080fd5b506102e26105a83660046123a8565b610fb3565b3480156105b957600080fd5b506103b360105481565b3480156105cf57600080fd5b506000546001600160a01b0316610346565b3480156105ed57600080fd5b506102e26105fc3660046123a8565b610fe2565b34801561060d57600080fd5b506103b360115481565b34801561062357600080fd5b50610319611011565b34801561063857600080fd5b506102ad61064736600461255e565b60166020526000908152604090205460ff1681565b34801561066857600080fd5b506103b3600d5481565b34801561067e57600080fd5b506102e261068d36600461257b565b611020565b34801561069e57600080fd5b506012546102ad90610100900460ff1681565b3480156106bd57600080fd5b506102e26106cc3660046123a8565b6110b6565b3480156106dd57600080fd5b506102e26106ec3660046123a8565b6110e5565b3480156106fd57600080fd5b506102e261070c3660046125c6565b611114565b34801561071d57600080fd5b5061031961072c3660046123a8565b611165565b34801561073d57600080fd5b506102e261074c3660046123c1565b6111ea565b34801561075d57600080fd5b50601554610346906001600160a01b031681565b34801561077d57600080fd5b506102e261078c36600461255e565b61121e565b6102e261079f3660046126a6565b61126a565b3480156107b057600080fd5b506103b3600c5481565b3480156107c657600080fd5b506103b3600e5481565b3480156107dc57600080fd5b506102ad6107eb3660046126f2565b611607565b3480156107fc57600080fd5b506102e261080b36600461255e565b6116fa565b34801561081c57600080fd5b506102e261082b36600461255e565b611795565b600061083b826117e8565b92915050565b6000546001600160a01b031633146108745760405162461bcd60e51b815260040161086b90612720565b60405180910390fd5b6012805460ff1916911515919091179055565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260040161086b90612720565b6108bb828261180d565b5050565b6060600380546108ce90612755565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa90612755565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050905090565b600061095c8261190a565b610979576040516333d1c03960e21b815260040160405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006109a082610e38565b9050806001600160a01b0316836001600160a01b031614156109d55760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906109f557506109f38133611607565b155b15610a13576040516367d9dca160e11b815260040160405180910390fd5b610a1e838383611936565b505050565b6000546001600160a01b03163314610a4d5760405162461bcd60e51b815260040161086b90612720565b600f55565b6000546001600160a01b03163314610a7c5760405162461bcd60e51b815260040161086b90612720565b601280549115156101000261ff0019909216919091179055565b610a1e838383611992565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610b16575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b35906001600160601b0316876127a6565b610b3f91906127db565b91519350909150505b9250929050565b6000610b5e6002546001540390565b60125490915060ff1615610ba55760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d1a5b99c81c185d5cd95960921b604482015260640161086b565b60003411610bee5760405162461bcd60e51b815260206004820152601660248201527526bab9ba1039b2b7321022aa24103a379036b4b73a1760511b604482015260640161086b565b600c54811115610c2c5760405162461bcd60e51b815260206004820152600960248201526829b7b6321037baba1760b91b604482015260640161086b565b601154821115610c725760405162461bcd60e51b8152602060048201526011602482015270115e18d959591cc81d1e1b881b1a5b5a5d607a1b604482015260640161086b565b3482600d54610c8191906127a6565b1115610cc85760405162461bcd60e51b815260206004820152601660248201527522aa241039b2b73a1034b99034b731b7b93932b1ba1760511b604482015260640161086b565b6108bb3383611ba5565b6000546001600160a01b03163314610cfc5760405162461bcd60e51b815260040161086b90612720565b60026009541415610d4f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161086b565b6002600955604051600090339047908381818185875af1925050503d8060008114610d96576040519150601f19603f3d011682016040523d82523d6000602084013e610d9b565b606091505b5050905080610ddf5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640161086b565b506001600955565b610a1e83838360405180602001604052806000815250611114565b6000546001600160a01b03163314610e2c5760405162461bcd60e51b815260040161086b90612720565b610a1e601383836121e7565b6000610e4382611bbf565b5192915050565b6040516bffffffffffffffffffffffff19606083901b1660208201526000908190603401604051602081830303815290604052805190602001209050610ec7858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014549150849050611cdb565b95945050505050565b6000546001600160a01b03163314610efa5760405162461bcd60e51b815260040161086b90612720565b600c55565b60006001600160a01b038216610f28576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526006602052604090205467ffffffffffffffff1690565b6000546001600160a01b03163314610f785760405162461bcd60e51b815260040161086b90612720565b610f826000611cf1565b565b6000546001600160a01b03163314610fae5760405162461bcd60e51b815260040161086b90612720565b601455565b6000546001600160a01b03163314610fdd5760405162461bcd60e51b815260040161086b90612720565b600e55565b6000546001600160a01b0316331461100c5760405162461bcd60e51b815260040161086b90612720565b600d55565b6060600480546108ce90612755565b6001600160a01b03821633141561104a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526008602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546001600160a01b031633146110e05760405162461bcd60e51b815260040161086b90612720565b601155565b6000546001600160a01b0316331461110f5760405162461bcd60e51b815260040161086b90612720565b601055565b61111f848484611992565b6001600160a01b0383163b15158015611141575061113f84848484611d41565b155b1561115f576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606111708261190a565b61118d57604051630a14c4b560e41b815260040160405180910390fd5b6000611197611e38565b90508051600014156111b857604051806020016040528060008152506111e3565b806111c284611e47565b6040516020016111d39291906127ef565b6040516020818303038152906040525b9392505050565b6000546001600160a01b031633146112145760405162461bcd60e51b815260040161086b90612720565b6108bb8282611ba5565b6000546001600160a01b031633146112485760405162461bcd60e51b815260040161086b90612720565b601580546001600160a01b0319166001600160a01b0392909216919091179055565b60006112796002546001540390565b6040516bffffffffffffffffffffffff193360601b16602082015290915060009060340160408051601f19818403018152919052805160209091012060125490915060ff16156112fc5760405162461bcd60e51b815260206004820152600e60248201526d135a5b9d1a5b99c81c185d5cd95960921b604482015260640161086b565b601254610100900460ff166113705760405162461bcd60e51b815260206004820152603460248201527f57686974656c697374206d696e74696e67206973206e6f7420616374697665206044820152731bdc881a185cc8185b1c9958591e48195b99195960621b606482015260840161086b565b600034116113b95760405162461bcd60e51b815260206004820152601660248201527526bab9ba1039b2b7321022aa24103a379036b4b73a1760511b604482015260640161086b565b600c548211156113f75760405162461bcd60e51b815260206004820152600960248201526829b7b6321037baba1760b91b604482015260640161086b565b600c54611404868461281e565b11156114685760405162461bcd60e51b815260206004820152602d60248201527f526571756573746564207175616e7469747920776f756c64206578636565642060448201526c3a37ba30b61039bab838363c9760991b606482015260840161086b565b6114a9848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014549150849050611cdb565b6114f55760405162461bcd60e51b815260206004820152601c60248201527f55736572206973206e6f7420696e207468652077686974656c69737400000000604482015260640161086b565b60105461150133610eff565b1061154e5760405162461bcd60e51b815260206004820181905260248201527f457863656564732077616c6c6574206c696d697420666f722070726573616c65604482015260640161086b565b600f548511156115a05760405162461bcd60e51b815260206004820152601960248201527f457863656564732070726573616c652074786e206c696d697400000000000000604482015260640161086b565b3485600e546115af91906127a6565b11156115f65760405162461bcd60e51b815260206004820152601660248201527522aa241039b2b73a1034b99034b731b7b93932b1ba1760511b604482015260640161086b565b6116003386611ba5565b5050505050565b60155460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561165457600080fd5b505afa158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c9190612836565b6001600160a01b031614806116b957506001600160a01b03831660009081526016602052604090205460ff165b156116c857600191505061083b565b6001600160a01b0380851660009081526008602090815260408083209387168352929052205460ff165b949350505050565b6000546001600160a01b031633146117245760405162461bcd60e51b815260040161086b90612720565b6001600160a01b0381166117895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086b565b61179281611cf1565b50565b6000546001600160a01b031633146117bf5760405162461bcd60e51b815260040161086b90612720565b6001600160a01b03166000908152601660205260409020805460ff19811660ff90911615179055565b60006001600160e01b0319821663152a902d60e11b148061083b575061083b82611f45565b6127106001600160601b038216111561187b5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b606482015260840161086b565b6001600160a01b0382166118d15760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c696420726563656976657200000000000000604482015260640161086b565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b60006001548210801561083b575050600090815260056020526040902054600160e01b900460ff161590565b60008281526007602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061199d82611bbf565b80519091506000906001600160a01b0316336001600160a01b031614806119cb575081516119cb9033611607565b806119e65750336119db84610951565b6001600160a01b0316145b905080611a0657604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611a3b5760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416611a6257604051633a954ecd60e21b815260040160405180910390fd5b611a726000848460000151611936565b6001600160a01b038581166000908152600660209081526040808320805467ffffffffffffffff1980821667ffffffffffffffff92831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600590945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611b5e57600154811015611b5e578251600082815260056020908152604090912080549186015167ffffffffffffffff16600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611600565b6108bb828260405180602001604052806000815250611f95565b604080516060810182526000808252602082018190529181019190915281600154811015611cc257600081815260056020908152604091829020825160608101845290546001600160a01b0381168252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16151591810182905290611cc05780516001600160a01b031615611c56579392505050565b5060001901600081815260056020908152604091829020825160608101845290546001600160a01b038116808352600160a01b820467ffffffffffffffff1693830193909352600160e01b900460ff1615159281019290925215611cbb579392505050565b611c56565b505b604051636f96cda160e11b815260040160405180910390fd5b600082611ce88584611fa2565b14949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611d76903390899088908890600401612853565b602060405180830381600087803b158015611d9057600080fd5b505af1925050508015611dc0575060408051601f3d908101601f19168201909252611dbd91810190612890565b60015b611e1b573d808015611dee576040519150601f19603f3d011682016040523d82523d6000602084013e611df3565b606091505b508051611e13576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060601380546108ce90612755565b606081611e6b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e955780611e7f816128ad565b9150611e8e9050600a836127db565b9150611e6f565b60008167ffffffffffffffff811115611eb057611eb06125b0565b6040519080825280601f01601f191660200182016040528015611eda576020820181803683370190505b5090505b84156116f257611eef6001836128c8565b9150611efc600a866128df565b611f0790603061281e565b60f81b818381518110611f1c57611f1c6128f3565b60200101906001600160f81b031916908160001a905350611f3e600a866127db565b9450611ede565b60006001600160e01b031982166380ac58cd60e01b1480611f7657506001600160e01b03198216635b5e139f60e01b145b8061083b57506301ffc9a760e01b6001600160e01b031983161461083b565b610a1e8383836001612016565b600081815b845181101561200e576000858281518110611fc457611fc46128f3565b60200260200101519050808311611fea5760008381526020829052604090209250611ffb565b600081815260208490526040902092505b5080612006816128ad565b915050611fa7565b509392505050565b6001546001600160a01b03851661203f57604051622e076360e81b815260040160405180910390fd5b8361205d5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260066020908152604080832080546fffffffffffffffffffffffffffffffff19811667ffffffffffffffff8083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c01811690920217909155858452600590925290912080546001600160e01b031916909217600160a01b42909216919091021790558080850183801561210f57506001600160a01b0387163b15155b15612198575b60405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46121606000888480600101955088611d41565b61217d576040516368d2bf6b60e11b815260040160405180910390fd5b8082141561211557826001541461219357600080fd5b6121de565b5b6040516001830192906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821415612199575b50600155611600565b8280546121f390612755565b90600052602060002090601f016020900481019282612215576000855561225b565b82601f1061222e5782800160ff1982351617855561225b565b8280016001018555821561225b579182015b8281111561225b578235825591602001919060010190612240565b5061226792915061226b565b5090565b5b80821115612267576000815560010161226c565b6001600160e01b03198116811461179257600080fd5b6000602082840312156122a857600080fd5b81356111e381612280565b803580151581146122c357600080fd5b919050565b6000602082840312156122da57600080fd5b6111e3826122b3565b6001600160a01b038116811461179257600080fd5b6000806040838503121561230b57600080fd5b8235612316816122e3565b915060208301356001600160601b038116811461233257600080fd5b809150509250929050565b60005b83811015612358578181015183820152602001612340565b8381111561115f5750506000910152565b6000815180845261238181602086016020860161233d565b601f01601f19169290920160200192915050565b6020815260006111e36020830184612369565b6000602082840312156123ba57600080fd5b5035919050565b600080604083850312156123d457600080fd5b82356123df816122e3565b946020939093013593505050565b60008060006060848603121561240257600080fd5b833561240d816122e3565b9250602084013561241d816122e3565b929592945050506040919091013590565b6000806040838503121561244157600080fd5b50508035926020909101359150565b6000806020838503121561246357600080fd5b823567ffffffffffffffff8082111561247b57600080fd5b818501915085601f83011261248f57600080fd5b81358181111561249e57600080fd5b8660208285010111156124b057600080fd5b60209290920196919550909350505050565b60008083601f8401126124d457600080fd5b50813567ffffffffffffffff8111156124ec57600080fd5b6020830191508360208260051b8501011115610b4857600080fd5b60008060006040848603121561251c57600080fd5b833567ffffffffffffffff81111561253357600080fd5b61253f868287016124c2565b9094509250506020840135612553816122e3565b809150509250925092565b60006020828403121561257057600080fd5b81356111e3816122e3565b6000806040838503121561258e57600080fd5b8235612599816122e3565b91506125a7602084016122b3565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156125dc57600080fd5b84356125e7816122e3565b935060208501356125f7816122e3565b925060408501359150606085013567ffffffffffffffff8082111561261b57600080fd5b818701915087601f83011261262f57600080fd5b813581811115612641576126416125b0565b604051601f8201601f19908116603f01168101908382118183101715612669576126696125b0565b816040528281528a602084870101111561268257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806000604084860312156126bb57600080fd5b83359250602084013567ffffffffffffffff8111156126d957600080fd5b6126e5868287016124c2565b9497909650939450505050565b6000806040838503121561270557600080fd5b8235612710816122e3565b91506020830135612332816122e3565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061276957607f821691505b6020821081141561278a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156127c0576127c0612790565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826127ea576127ea6127c5565b500490565b6000835161280181846020880161233d565b83519083019061281581836020880161233d565b01949350505050565b6000821982111561283157612831612790565b500190565b60006020828403121561284857600080fd5b81516111e3816122e3565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061288690830184612369565b9695505050505050565b6000602082840312156128a257600080fd5b81516111e381612280565b60006000198214156128c1576128c1612790565b5060010190565b6000828210156128da576128da612790565b500390565b6000826128ee576128ee6127c5565b500690565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fc357f7406aeb6462dbdfb77ff16969631de5d469d6f48ff27c523692d55085664736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}.Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist contracts."
      },
      "setRoyaltyInfo(address,uint96)": {
        "notice": "Sets the contract-wide royalty info."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2434,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2436,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2438,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2440,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2445,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_ownerships",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2423_storage)"
      },
      {
        "astId": 2450,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_addressData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(AddressData)2432_storage)"
      },
      {
        "astId": 2454,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2460,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 375,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(RoyaltyInfo)372_storage"
      },
      {
        "astId": 380,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)372_storage)"
      },
      {
        "astId": 1824,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "maxSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1827,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "price",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1830,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "preSalePrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1833,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "maxMintAmountPerTxPreSale",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1836,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "maxPerWalletPreSale",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1839,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "maxMintAmountPerTx",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1842,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "paused",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 1845,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "onlyWhitelist",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 1847,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 1849,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 1851,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 2290,
        "contract": "contracts/UrbanDogz.sol:UrbanDogz",
        "label": "proxyToApproved",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2432_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2432_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)372_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)372_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2423_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2423_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2432_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2425,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2427,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2429,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2431,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "aux",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)372_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 369,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 371,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2423_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2418,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2420,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2422,
            "contract": "contracts/UrbanDogz.sol:UrbanDogz",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}